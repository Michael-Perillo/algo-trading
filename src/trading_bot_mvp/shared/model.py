# generated by datamodel-codegen:
#   filename:  common_models.yaml
#   timestamp: 2025-06-20T22:57:06+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field


class Account(BaseModel):
    id: Union[str, UUID] = Field(
        ..., description='Unique account identifier (string or UUID)'
    )
    status: str = Field(
        ..., description='Account status (e.g., ACTIVE, SUSPENDED, CLOSED)'
    )
    currency: str = Field(..., description='Account currency (e.g., USD)')
    cash: float = Field(..., description='Cash balance')
    equity: float = Field(..., description='Total equity value')
    buying_power: float = Field(..., description='Buying power available')
    created_at: Optional[datetime] = Field(
        None, description='Account creation timestamp'
    )


class FieldMap(BaseModel):
    mapping: Dict[str, str] = Field(
        ...,
        description='Dictionary where keys are common model field names and values are the corresponding brokerage API field names.\n',
    )


class Side(Enum):
    buy = 'buy'
    sell = 'sell'


class Type(Enum):
    market = 'market'
    limit = 'limit'
    stop = 'stop'
    stop_limit = 'stop_limit'
    trailing_stop = 'trailing_stop'


class Order(BaseModel):
    id: str = Field(..., description='Unique order identifier')
    symbol: str = Field(..., description='Ticker symbol')
    side: Side
    type: Type
    qty: float = Field(..., description='Quantity of asset to trade')
    filled_qty: Optional[float] = Field(None, description='Quantity filled')
    status: str = Field(..., description='Order status (e.g., new, filled, canceled)')
    price: Optional[float] = Field(
        None, description='Price per share (for limit/stop orders)'
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class Side1(Enum):
    long = 'long'
    short = 'short'


class Position(BaseModel):
    symbol: str
    qty: float
    avg_entry_price: float
    market_value: float
    unrealized_pl: float
    side: Side1


class Bar(BaseModel):
    t: datetime
    o: float
    h: float
    l: float
    c: float
    v: float


class Trade(BaseModel):
    t: datetime
    p: float
    s: float
    i: str = Field(..., description='Trade ID')


class Timeframe(Enum):
    field_1m = '1m'
    field_5m = '5m'
    field_15m = '15m'
    field_30m = '30m'
    field_1h = '1h'
    field_4h = '4h'
    field_1d = '1D'


class BarRequest(BaseModel):
    symbol: str = Field(..., description='Ticker symbol')
    timeframe: Timeframe = Field(..., description='Timeframe for the bars')
    start: Optional[datetime] = Field(None, description='Start time for the bar data')
    end: Optional[datetime] = Field(None, description='End time for the bar data')
