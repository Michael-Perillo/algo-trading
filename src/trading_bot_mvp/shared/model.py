# generated by datamodel-codegen:
#   filename:  common_models.yaml
#   timestamp: 2025-06-23T22:03:44+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any
from uuid import UUID

from pydantic import BaseModel, Field


class Account(BaseModel):
    id: str | UUID = Field(..., description='Unique account identifier (string or UUID)')
    status: str = Field(..., description='Account status (e.g., ACTIVE, SUSPENDED, CLOSED)')
    currency: str = Field(..., description='Account currency (e.g., USD)')
    cash: float = Field(..., description='Cash balance')
    equity: float = Field(..., description='Total equity value')
    buying_power: float = Field(..., description='Buying power available')
    created_at: datetime | None = Field(None, description='Account creation timestamp')


class FieldMap(BaseModel):
    mapping: dict[str, str] = Field(
        ...,
        description='Dictionary where keys are common model field names and values are the corresponding brokerage API field names.\n',
    )


class OrderSide(Enum):
    buy = 'buy'
    sell = 'sell'


class OrderType(Enum):
    market = 'market'
    limit = 'limit'
    stop = 'stop'
    stop_limit = 'stop_limit'
    trailing_stop = 'trailing_stop'


class TimeInForce(Enum):
    day = 'day'
    gtc = 'gtc'
    opg = 'opg'
    cls = 'cls'
    ioc = 'ioc'
    fok = 'fok'


class OrderClass(Enum):
    simple = 'simple'
    bracket = 'bracket'
    oto = 'oto'
    oco = 'oco'


class OrderRequest(BaseModel):
    symbol: str = Field(..., description='Ticker symbol for the asset to trade')
    side: OrderSide
    type: OrderType
    qty: float = Field(..., description='Quantity of asset to trade')
    time_in_force: TimeInForce | None = None
    order_class: OrderClass | None = None
    limit_price: float | None = Field(
        None, description='Limit price for limit or take-profit orders'
    )
    stop_price: float | None = Field(None, description='Stop price for stop or stop-loss orders')
    take_profit_price: float | None = Field(
        None, description='Take profit price for bracket orders'
    )
    stop_loss_price: float | None = Field(None, description='Stop loss price for bracket orders')
    client_order_id: str | None = Field(
        None, description='Optional client-provided order identifier'
    )
    metadata: dict[str, Any] | None = Field(
        None, description='Arbitrary metadata for the order request'
    )


class Side(Enum):
    long = 'long'
    short = 'short'


class Position(BaseModel):
    vendor_asset_id: UUID | None = Field(None, description='Unique asset identifier')
    symbol: str = Field(..., description='Ticker symbol')
    exchange: str | None = Field(None, description='Exchange where the asset is traded')
    asset_class: str | None = Field(None, description='Asset class (e.g., us_equity)')
    qty: float = Field(..., description='Quantity held')
    qty_available: float | None = Field(None, description='Quantity available to trade')
    side: Side = Field(..., description='Position side')
    avg_entry_price: float = Field(..., description='Average entry price')
    market_value: float = Field(..., description='Current market value of the position')
    cost_basis: float | None = Field(None, description='Cost basis of the position')
    unrealized_pl: float = Field(..., description='Unrealized profit/loss')
    unrealized_plpc: float | None = Field(
        None, description='Unrealized profit/loss percent (decimal, e.g., 0.05 for 5%)'
    )
    unrealized_intraday_pl: float | None = Field(
        None, description='Unrealized intraday profit/loss'
    )
    unrealized_intraday_plpc: float | None = Field(
        None, description='Unrealized intraday profit/loss percent'
    )
    current_price: float | None = Field(None, description='Current price of the asset')
    lastday_price: float | None = Field(None, description="Previous day's closing price")
    change_today: float | None = Field(
        None,
        description='Percent change from previous close (decimal, e.g., -0.01 for -1%)',
    )
    asset_marginable: bool | None = Field(None, description='Whether the asset is marginable')


class Bar(BaseModel):
    t: datetime
    o: float
    h: float
    l: float
    c: float
    v: float


class Trade(BaseModel):
    t: datetime
    p: float
    s: float
    i: str = Field(..., description='Trade ID')


class Timeframe(Enum):
    field_1m = '1m'
    field_5m = '5m'
    field_15m = '15m'
    field_30m = '30m'
    field_1h = '1h'
    field_4h = '4h'
    field_1D = '1D'


class BarRequest(BaseModel):
    symbol: str = Field(..., description='Ticker symbol')
    timeframe: Timeframe = Field(..., description='Timeframe for the bars')
    start: datetime | None = Field(None, description='Start time for the bar data')
    end: datetime | None = Field(None, description='End time for the bar data')


# todo implement OrderResponse model in common_models.yaml
class OrderResponse(BaseModel):
    id: str = Field(..., description='Unique order identifier')
