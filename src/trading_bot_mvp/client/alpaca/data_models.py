# generated by datamodel-codegen:
#   filename:  data_spec.json
#   timestamp: 2025-06-23T22:03:42+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Optional

from pydantic import AnyUrl, BaseModel, Field, RootModel, constr


class CADueBillRedemptionDate(RootModel[date]):
    root: date


class CAEffectiveDate(RootModel[date]):
    root: date = Field(
        ...,
        description='The effective date marks the cutoff point for shareholders to be credited.',
    )


class CAExDate(RootModel[date]):
    root: date = Field(
        ...,
        description='The ex-date marks the cutoff point for shareholders to be credited.',
    )


class CAPayableDate(RootModel[date]):
    root: date


class CAProcessDate(RootModel[date]):
    root: date = Field(
        ..., description='The date when the corporate action is processed by Alpaca.'
    )


class CARecordDate(RootModel[date]):
    root: date


class CARedemption(BaseModel):
    symbol: str
    rate: float
    process_date: CAProcessDate
    payable_date: Optional[CAPayableDate] = None


class CAReverseSplit(BaseModel):
    symbol: str
    new_rate: float
    old_rate: float
    process_date: CAProcessDate
    ex_date: CAExDate
    record_date: Optional[CARecordDate] = None
    payable_date: Optional[CAPayableDate] = None


class CASpinOff(BaseModel):
    source_symbol: str
    source_rate: float
    new_symbol: str
    new_rate: float
    process_date: CAProcessDate
    ex_date: CAExDate
    record_date: Optional[CARecordDate] = None
    payable_date: Optional[CAPayableDate] = None
    due_bill_redemption_date: Optional[CADueBillRedemptionDate] = None


class CAStockAndCashMerger(BaseModel):
    acquirer_symbol: str
    acquirer_rate: float
    acquiree_symbol: str
    acquiree_rate: float
    cash_rate: float
    process_date: CAProcessDate
    effective_date: CAEffectiveDate
    payable_date: Optional[CAPayableDate] = None


class CAStockDividend(BaseModel):
    symbol: str
    rate: float
    process_date: CAProcessDate
    ex_date: CAExDate
    record_date: Optional[CARecordDate] = None
    payable_date: Optional[CAPayableDate] = None


class CAStockMerger(BaseModel):
    acquirer_symbol: str
    acquirer_rate: float
    acquiree_symbol: str
    acquiree_rate: float
    process_date: CAProcessDate
    effective_date: CAEffectiveDate
    payable_date: Optional[CAPayableDate] = None


class CAUnitSplit(BaseModel):
    old_symbol: str
    old_rate: float
    new_symbol: str
    new_rate: float
    alternate_symbol: str
    alternate_rate: float
    process_date: CAProcessDate
    effective_date: CAEffectiveDate
    payable_date: Optional[CAPayableDate] = None


class CAWorthlessRemoval(BaseModel):
    symbol: str
    process_date: CAProcessDate


class CryptoLoc(Enum):
    us = 'us'


class CryptoOrderbookEntry(BaseModel):
    p: float = Field(..., description='Price.')
    s: float = Field(..., description='Size.')


class ForexCurrencyPairs(RootModel[str]):
    root: str = Field(
        ...,
        description='A comma-separated string with currency pairs.',
        examples=['USDJPY,USDMXN'],
    )


class ForexRate(BaseModel):
    bp: float = Field(
        ...,
        description='The last bid price value of the currency at the end of the timeframe.',
    )
    mp: float = Field(
        ...,
        description='The last mid price value of the currency at the end of the timeframe.',
    )
    ap: float = Field(
        ...,
        description='The last ask price value of the currency at the end of the timeframe.',
    )
    t: datetime = Field(..., description='Timestamp of the rate.')


class Size(Enum):
    thumb = 'thumb'
    small = 'small'
    large = 'large'


class NewsImage(BaseModel):
    size: Size = Field(
        ...,
        description='Possible values for size are thumb, small and large.',
        examples=['thumb'],
    )
    url: AnyUrl = Field(..., description='URL to image from news article.')


class NextPageToken(RootModel[Optional[str]]):
    root: Optional[str] = Field(None, description='Pagination token for next page.')


class OptionFeed(Enum):
    opra = 'opra'
    indicative = 'indicative'


class OptionNextPageToken(RootModel[NextPageToken]):
    root: NextPageToken


class Greeks(BaseModel):
    delta: float
    gamma: float
    theta: float
    vega: float
    rho: float


class ScreenerMarketType(Enum):
    stocks = 'stocks'
    crypto = 'crypto'


class ScreenerMostActive(BaseModel):
    symbol: str
    volume: int = Field(..., description='Cumulative volume for the current trading day.')
    trade_count: int = Field(..., description='Cumulative trade count for the current trading day.')


class ScreenerMostActivesResp(BaseModel):
    most_actives: list[ScreenerMostActive] = Field(
        ..., description='List of top N most active symbols.'
    )
    last_updated: str = Field(
        ...,
        description='Time when the most actives were last computed. Formatted as a RFC-3339 date-time with nanosecond precision.\n',
    )


class ScreenerMover(BaseModel):
    symbol: str = Field(..., description='Symbol of market moving asset.')
    percent_change: float = Field(..., description='Percentage difference change for the day.')
    change: float = Field(..., description='Difference in change for the day.')
    price: float = Field(..., description='Current price of market moving asset.')


class ScreenerMoversResp(BaseModel):
    gainers: list[ScreenerMover] = Field(..., description='List of top N gainers.')
    losers: list[ScreenerMover] = Field(..., description='List of top N losers.')
    market_type: ScreenerMarketType
    last_updated: str = Field(
        ...,
        description='Time when the movers were last computed. Formatted as a RFC-3339 date-time with nanosecond precision.\n',
    )


class Sort(Enum):
    asc = 'asc'
    desc = 'desc'


class StockAdjustment(Enum):
    raw = 'raw'
    split = 'split'
    dividend = 'dividend'
    all = 'all'


class StockAuctionFeed(RootModel[str]):
    root: str


class StockConditions(RootModel[Optional[dict[str, str]]]):
    root: Optional[dict[str, str]] = None


class StockExchanges(RootModel[Optional[dict[str, str]]]):
    root: Optional[dict[str, str]] = None


class StockHistoricalFeed(Enum):
    iex = 'iex'
    otc = 'otc'
    sip = 'sip'


class StockLatestFeed(Enum):
    iex = 'iex'
    otc = 'otc'
    sip = 'sip'
    delayed_sip = 'delayed_sip'


class StockTape(Enum):
    A = 'A'
    B = 'B'
    C = 'C'
    O = 'O'


class Timestamp(RootModel[datetime]):
    root: datetime = Field(
        ..., description='Timestamp in RFC-3339 format with nanosecond precision.'
    )


class CACashDividend(BaseModel):
    symbol: str
    rate: float
    special: bool
    foreign: bool
    process_date: CAProcessDate
    ex_date: CAExDate
    record_date: Optional[CARecordDate] = None
    payable_date: Optional[CAPayableDate] = None
    due_bill_on_date: Optional[date] = None
    due_bill_off_date: Optional[date] = None


class CACashMerger(BaseModel):
    acquirer_symbol: Optional[str] = None
    acquiree_symbol: str
    rate: float
    process_date: CAProcessDate
    effective_date: CAEffectiveDate
    payable_date: Optional[CAPayableDate] = None


class RightsDistribution(BaseModel):
    source_symbol: str
    new_symbol: str
    rate: float
    process_date: CAProcessDate
    ex_date: CAExDate
    record_date: Optional[CARecordDate] = None
    payable_date: CAPayableDate
    expiration_date: Optional[date] = None


class CAForwardSplit(BaseModel):
    symbol: str
    new_rate: float
    old_rate: float
    process_date: CAProcessDate
    ex_date: CAExDate
    record_date: Optional[CARecordDate] = None
    payable_date: Optional[CAPayableDate] = None
    due_bill_redemption_date: Optional[CADueBillRedemptionDate] = None


class CANameChange(BaseModel):
    old_symbol: str
    new_symbol: str
    process_date: CAProcessDate


class CryptoBar(BaseModel):
    t: Timestamp
    o: float = Field(..., description='Opening price.')
    h: float = Field(..., description='High price.')
    l: float = Field(..., description='Low price.')
    c: float = Field(..., description='Closing price.')
    v: float = Field(..., description='Bar volume.')
    n: int = Field(..., description='Trade count in the bar.')
    vw: float = Field(..., description='Volume weighted average price.')


class CryptoBarsResp(BaseModel):
    bars: dict[str, list[CryptoBar]]
    next_page_token: NextPageToken


class CryptoLatestBarsResp(BaseModel):
    bars: dict[str, CryptoBar]


class CryptoOrderbook(BaseModel):
    t: Timestamp
    b: list[CryptoOrderbookEntry]
    a: list[CryptoOrderbookEntry]


class CryptoQuote(BaseModel):
    t: Timestamp
    bp: float = Field(..., description='Bid price.')
    bs: float = Field(..., description='Bid size.')
    ap: float = Field(..., description='Ask price.')
    as_: float = Field(..., alias='as', description='Ask size.')


class CryptoQuotesResp(BaseModel):
    quotes: dict[str, list[CryptoQuote]]
    next_page_token: NextPageToken


class CryptoTrade(BaseModel):
    t: Timestamp
    p: float = Field(..., description='Trade price.')
    s: float = Field(..., description='Trade size.')
    i: int = Field(..., description='Trade ID.')
    tks: str = Field(..., description='Taker side: B for buyer, S for seller\n')


class CryptoTradesResp(BaseModel):
    trades: dict[str, list[CryptoTrade]]
    next_page_token: NextPageToken


class ForexLatestRatesResp(BaseModel):
    rates: dict[str, ForexRate]


class ForexRatesResp(BaseModel):
    rates: dict[str, list[ForexRate]]
    next_page_token: NextPageToken


class News(BaseModel):
    id: int = Field(..., description='News article ID.')
    headline: constr(min_length=1) = Field(..., description='Headline or title of the article.')
    author: constr(min_length=1) = Field(..., description='Original author of news article.')
    created_at: datetime = Field(..., description='Date article was created (RFC-3339).')
    updated_at: datetime = Field(..., description='Date article was updated (RFC-3339).')
    summary: constr(min_length=1) = Field(
        ...,
        description='Summary text for the article (may be first sentence of content).',
    )
    content: constr(min_length=1) = Field(
        ..., description='Content of the news article (might contain HTML).'
    )
    url: Optional[AnyUrl] = Field(None, description='URL of article (if applicable).')
    images: list[NewsImage] = Field(
        ...,
        description='List of images (URLs) related to given article (may be empty).',
    )
    symbols: list[str] = Field(..., description='List of related or mentioned symbols.')
    source: constr(min_length=1) = Field(
        ..., description='Source where the news originated from (e.g. Benzinga).'
    )


class NewsResp(BaseModel):
    news: list[News]
    next_page_token: NextPageToken


class OptionBar(BaseModel):
    t: Timestamp
    o: float = Field(..., description='Opening price.')
    h: float = Field(..., description='High price.')
    l: float = Field(..., description='Low price.')
    c: float = Field(..., description='Closing price.')
    v: int = Field(..., description='Bar volume.')
    n: int = Field(..., description='Trade count in the bar.')
    vw: float = Field(..., description='Volume weighted average price.')


class OptionBarsResp(BaseModel):
    bars: dict[str, list[OptionBar]]
    next_page_token: NextPageToken
    currency: Optional[str] = None


class OptionQuote(BaseModel):
    t: Timestamp
    bx: str = Field(..., description='Bid exchange.')
    bp: float = Field(..., description='Bid price.')
    bs: int = Field(..., description='Bid size.')
    ax: str = Field(..., description='Ask exchange.')
    ap: float = Field(..., description='Ask price.')
    as_: int = Field(..., alias='as', description='Ask size.')
    c: str = Field(..., description='Quote condition.')


class OptionTrade(BaseModel):
    t: Timestamp
    x: str
    p: float = Field(..., description='Trade price.')
    s: int = Field(..., description='Trade size.')
    c: str = Field(..., description='Trade condition.')


class OptionTradesResp(BaseModel):
    trades: dict[str, list[OptionTrade]]
    currency: Optional[str] = None
    next_page_token: NextPageToken


class StockAuction(BaseModel):
    t: Timestamp
    x: str = Field(
        ...,
        description='Exchange code. See `v2/stocks/meta/exchanges` for more details.',
    )
    p: float = Field(..., description='Auction price.')
    s: Optional[int] = Field(None, description='Auction trade size.')
    c: str = Field(
        ...,
        description='The condition flag indicating that this is an auction. See `v2/stocks/meta/conditions/trade` for more details.\n',
    )


class StockBar(BaseModel):
    t: Timestamp
    o: float = Field(..., description='Opening price.')
    h: float = Field(..., description='High price.')
    l: float = Field(..., description='Low price.')
    c: float = Field(..., description='Closing price.')
    v: int = Field(..., description='Bar volume.')
    n: int = Field(..., description='Trade count in the bar.')
    vw: float = Field(..., description='Volume weighted average price.')


class StockBarsResp(BaseModel):
    bars: dict[str, list[StockBar]]
    next_page_token: NextPageToken
    currency: Optional[str] = None


class StockBarsRespSingle(BaseModel):
    symbol: str
    bars: list[StockBar]
    currency: Optional[str] = None
    next_page_token: NextPageToken


class StockDailyAuctions(BaseModel):
    d: date = Field(..., description='Date in RFC-3339.')
    o: list[StockAuction] = Field(..., description='Opening auctions.')
    c: list[StockAuction] = Field(
        ...,
        description='Closing auctions. Every price / exchange / condition triplet is only shown once, with its earliest timestamp.',
    )


class StockLatestBarsResp(BaseModel):
    bars: dict[str, StockBar]
    currency: Optional[str] = None


class StockLatestBarsRespSingle(BaseModel):
    bar: StockBar
    symbol: str
    currency: Optional[str] = None


class StockQuote(BaseModel):
    t: Timestamp
    bx: str = Field(
        ...,
        description='Bid exchange. See `v2/stocks/meta/exchanges` for more details.',
    )
    bp: float = Field(..., description='Bid price. 0 means the security has no active bid.')
    bs: int = Field(..., description='Bid size.')
    ax: str = Field(
        ...,
        description='Ask exchange. See `v2/stocks/meta/exchanges` for more details.',
    )
    ap: float = Field(..., description='Ask price. 0 means the security has no active ask.')
    as_: int = Field(..., alias='as', description='Ask size.')
    c: list[str] = Field(
        ...,
        description='Condition flags. See `v2/stocks/meta/conditions/quote` for more details. If the array contains one flag, it applies to both the bid and ask. If the array contains two flags, the first one applies to the bid and the second one to the ask.\n',
    )
    z: StockTape


class StockQuotesResp(BaseModel):
    quotes: dict[str, list[StockQuote]]
    currency: Optional[str] = None
    next_page_token: NextPageToken


class StockQuotesRespSingle(BaseModel):
    symbol: str
    quotes: list[StockQuote]
    currency: Optional[str] = None
    next_page_token: NextPageToken


class StockTrade(BaseModel):
    t: Timestamp
    x: str = Field(
        ...,
        description='Exchange code. See `v2/stocks/meta/exchanges` for more details.',
    )
    p: float = Field(..., description='Trade price.')
    s: int = Field(..., description='Trade size.')
    i: int = Field(..., description='Trade ID sent by the exchange.')
    c: list[str] = Field(
        ...,
        description='Condition flags. See `v2/stocks/meta/conditions/trade` for more details.',
    )
    z: StockTape
    u: Optional[str] = Field(
        None,
        description="Update to the trade. This field is optional, if it's missing, the trade is valid. Otherwise, it can have these values:\n - canceled: indicates that the trade has been canceled\n - incorrect: indicates that the trade has been corrected and the given trade is no longer valid\n - corrected: indicates that this trade is the correction of a previous (incorrect) trade\n",
    )


class StockTradesResp(BaseModel):
    trades: dict[str, list[StockTrade]]
    currency: Optional[str] = None
    next_page_token: NextPageToken


class StockTradesRespSingle(BaseModel):
    symbol: str
    trades: list[StockTrade]
    next_page_token: NextPageToken
    currency: Optional[str] = None


class CACorporateActions(BaseModel):
    reverse_splits: Optional[list[CAReverseSplit]] = None
    forward_splits: Optional[list[CAForwardSplit]] = None
    unit_splits: Optional[list[CAUnitSplit]] = None
    stock_dividends: Optional[list[CAStockDividend]] = None
    cash_dividends: Optional[list[CACashDividend]] = None
    spin_offs: Optional[list[CASpinOff]] = None
    cash_mergers: Optional[list[CACashMerger]] = None
    stock_mergers: Optional[list[CAStockMerger]] = None
    stock_and_cash_mergers: Optional[list[CAStockAndCashMerger]] = None
    redemptions: Optional[list[CARedemption]] = None
    name_changes: Optional[list[CANameChange]] = None
    worthless_removals: Optional[list[CAWorthlessRemoval]] = None
    rights_distributions: Optional[list[RightsDistribution]] = None


class CACorporateActionsResp(BaseModel):
    corporate_actions: CACorporateActions
    next_page_token: NextPageToken


class CryptoLatestOrderbooksResp(BaseModel):
    orderbooks: dict[str, CryptoOrderbook]


class CryptoLatestQuotesResp(BaseModel):
    quotes: dict[str, CryptoQuote]


class CryptoLatestTradesResp(BaseModel):
    trades: dict[str, CryptoTrade]


class CryptoSnapshot(BaseModel):
    dailyBar: Optional[CryptoBar] = None
    latestQuote: Optional[CryptoQuote] = None
    latestTrade: Optional[CryptoTrade] = None
    minuteBar: Optional[CryptoBar] = None
    prevDailyBar: Optional[CryptoBar] = None


class CryptoSnapshotsResp(BaseModel):
    snapshots: dict[str, CryptoSnapshot]


class OptionLatestQuotesResp(BaseModel):
    quotes: dict[str, OptionQuote]


class OptionLatestTradesResp(BaseModel):
    trades: dict[str, OptionTrade]


class OptionSnapshot(BaseModel):
    dailyBar: Optional[OptionBar] = None
    greeks: Optional[Greeks] = Field(
        None,
        description='The greeks for the contract calculated using the Black-Scholes model.',
    )
    impliedVolatility: Optional[float] = Field(
        None, description='Implied volatility calculated using the Black-Scholes model.'
    )
    latestQuote: Optional[OptionQuote] = None
    latestTrade: Optional[OptionTrade] = None
    minuteBar: Optional[OptionBar] = None
    prevDailyBar: Optional[OptionBar] = None


class OptionSnapshotsResp(BaseModel):
    snapshots: dict[str, OptionSnapshot]
    next_page_token: NextPageToken


class StockAuctionsResp(BaseModel):
    auctions: dict[str, list[StockDailyAuctions]]
    currency: Optional[str] = None
    next_page_token: NextPageToken


class StockAuctionsRespSingle(BaseModel):
    symbol: str
    auctions: list[StockDailyAuctions]
    currency: Optional[str] = None
    next_page_token: NextPageToken


class StockLatestQuotesResp(BaseModel):
    quotes: dict[str, StockQuote]
    currency: Optional[str] = None


class StockLatestQuotesRespSingle(BaseModel):
    quote: StockQuote
    symbol: str
    currency: Optional[str] = None


class StockLatestTradesResp(BaseModel):
    trades: dict[str, StockTrade]
    currency: Optional[str] = None


class StockLatestTradesRespSingle(BaseModel):
    trade: StockTrade
    symbol: str
    currency: Optional[str] = None


class StockSnapshot(BaseModel):
    dailyBar: Optional[StockBar] = None
    latestQuote: Optional[StockQuote] = None
    latestTrade: Optional[StockTrade] = None
    minuteBar: Optional[StockBar] = None
    prevDailyBar: Optional[StockBar] = None


class StockSnapshotsResp(RootModel[Optional[dict[str, StockSnapshot]]]):
    root: Optional[dict[str, StockSnapshot]] = None


class StockSnapshotsRespSingle(StockSnapshot):
    symbol: Optional[str] = None
    currency: Optional[str] = None
