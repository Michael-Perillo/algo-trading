# generated by datamodel-codegen:
#   filename:  data_spec.yaml
#   timestamp: 2025-06-20T21:19:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field, constr


class Trade(BaseModel):
    t: Optional[datetime] = Field(
        None, description='Timestamp in RFC-3339 format with nanosecond precision'
    )
    x: str = Field(..., description='Exchange where the trade happened.')
    p: Optional[float] = Field(None, description='Trade price.')
    s: Optional[float] = Field(None, description='Trade Size.')
    c: Optional[List[str]] = Field(
        None, description='Trade conditions (Stock trade only)'
    )
    i: int = Field(..., description='Trade ID')
    z: Optional[str] = Field(None, description='Tape (Stock trade only)')
    tks: Optional[str] = Field(None, description="Taker's side (crypto trade only)")


class TradesResponse(BaseModel):
    trades: List[Trade] = Field(..., description='Array of trades')
    symbol: constr(min_length=1) = Field(
        ..., description='Symbol that was queried', example='AAPL'
    )
    next_page_token: Optional[str] = Field(
        None, description='Token that can be used to query the next page'
    )


class LatestTradeResponse(BaseModel):
    trade: Optional[Trade] = None
    symbol: constr(min_length=1) = Field(
        ..., description='Symbol that was queried', example='AAPL'
    )


class MultiTradesResponse(BaseModel):
    trades: Dict[str, List[Trade]]
    next_page_token: Optional[str] = None


class LatestMultiTradesResponse(BaseModel):
    trades: Dict[str, Trade]


class Quote(BaseModel):
    t: datetime = Field(
        ..., description='Timestamp in RFC-3339 format with nanosecond precision'
    )
    ax: Optional[str] = Field(None, description='ask exchange (Stock quote only)')
    ap: Optional[float] = Field(None, description='ask price\n')
    as_: Optional[float] = Field(None, alias='as', description='ask size\n')
    bx: Optional[str] = Field(None, description='bid exchange (Stock quote only)')
    bp: Optional[float] = Field(None, description='bid price\n')
    bs: Optional[float] = Field(None, description='bid size')
    c: Optional[List[str]] = Field(
        None, description='quote conditions (Stock quotes only)'
    )
    x: Optional[str] = Field(None, description='Exchange (Crypto quote Only)')
    z: Optional[str] = Field(None, description='Tape (Stock quote only)')


class QuotesResponse(BaseModel):
    quotes: List[Quote] = Field(..., min_items=1, unique_items=True)
    symbol: constr(min_length=1) = Field(..., example='AAPL')
    next_page_token: Optional[constr(min_length=1)] = None


class LatestQuoteResponse(BaseModel):
    quote: Quote
    symbol: constr(min_length=1) = Field(..., example='AAPL')


class MultiQuotesReponse(BaseModel):
    quotes: Dict[str, List[Quote]]
    next_page_token: Optional[str] = Field(
        None,
        description='pass this token with your request again to get the next page of results',
    )


class LatestMultiQuotesResponse(BaseModel):
    quotes: Dict[str, Quote]


class X(Enum):
    FTXU = 'FTXU'
    ERSX = 'ERSX'
    CBSE = 'CBSE'


class Bar(BaseModel):
    t: datetime = Field(
        ..., description='Timestamp in RFC-3339 format with nanosecond precision.'
    )
    x: Optional[X] = Field(
        None, description='Exchange. Only present on Bars for Crypto symbols'
    )
    o: float = Field(..., description='Open price')
    h: float = Field(..., description='High price.')
    l: float = Field(..., description='Low price.\n')
    c: float = Field(..., description='Close price.')
    v: float = Field(..., description='Volume.')
    n: Optional[int] = Field(None, description='Number of trades.')
    vw: Optional[float] = Field(None, description='Volume weighted average price.')


class BarsResponse(BaseModel):
    bars: List[Bar] = Field(
        ..., description='The array of Bar data', min_items=1, unique_items=True
    )
    symbol: constr(min_length=1) = Field(
        ...,
        description='the stock ticker or crypto symbol this set of bar data is for',
        example='AAPL',
    )
    next_page_token: constr(min_length=1)


class LatestBarResponse(BaseModel):
    symbol: constr(min_length=1)
    bar: Bar


class MultiBarsResponse(BaseModel):
    bars: Dict[str, List[Bar]]
    next_page_token: Optional[str] = None


class LatestMultiBarsResponse(BaseModel):
    bars: Dict[str, Bar]


class Size(Enum):
    thumb = 'thumb'
    small = 'small'
    large = 'large'


class NewsImage(BaseModel):
    size: Size = Field(
        ...,
        description='Possible values for size are thumb, small and large.',
        example='thumb',
    )
    url: AnyUrl = Field(..., description='url to image from news article')


class XBBO(BaseModel):
    t: datetime = Field(
        ..., description='Timestamp in RFC-3339 format with nanosecond precision.'
    )
    ax: constr(min_length=1) = Field(..., description='Ask exchange.')
    ap: float = Field(..., description='Ask price.')
    as_: float = Field(..., alias='as', description='Ask size.')
    bx: constr(min_length=1) = Field(..., description='Bid exchange.')
    bp: float = Field(..., description='Bid price.')
    bs: float = Field(..., description='Bid size.')


class LatestXBBOResponse(BaseModel):
    symbol: constr(min_length=1)
    xbbo: XBBO


class LatestMultiXBBOResponse(BaseModel):
    xbbos: Dict[str, XBBO]


class CryptoSpreadsResponse(BaseModel):
    spreads: Dict[str, int]


class MarketType(Enum):
    stocks = 'stocks'
    crypto = 'crypto'


class MarketMoverAsset(BaseModel):
    symbol: str = Field(..., description='Symbol of market moving asset')
    percent_change: float = Field(
        ..., description='Percentage difference change for the day'
    )
    change: float = Field(..., description='Difference in change for the day')
    price: float = Field(..., description='Current price of market moving asset')


class ExchangesResponse(BaseModel):
    __root__: Optional[Dict[str, str]] = None


class Snapshot(BaseModel):
    latestTrade: Optional[Trade] = None
    latestQuote: Optional[Quote] = None
    minuteBar: Optional[Bar] = None
    dailyBar: Optional[Bar] = None
    prevDailyBar: Optional[Bar] = None


class MultiSnapshotResponse(BaseModel):
    __root__: Optional[Dict[str, Snapshot]] = None


class News(BaseModel):
    id: int = Field(..., description='News article ID')
    headline: constr(min_length=1) = Field(
        ..., description='Headline or title of the article'
    )
    author: constr(min_length=1) = Field(
        ..., description='Original author of news article'
    )
    created_at: datetime = Field(..., description='Date article was created (RFC 3339)')
    updated_at: datetime = Field(..., description='Date article was updated (RFC 3339)')
    summary: constr(min_length=1) = Field(
        ...,
        description='Summary text for the article (may be first sentence of content)',
    )
    content: constr(min_length=1) = Field(
        ..., description='Content of the news article (might contain HTML)'
    )
    url: Optional[AnyUrl] = Field(None, description='URL of article (if applicable)')
    images: List[NewsImage] = Field(
        ...,
        description='List of images (URLs) related to given article (may be empty)',
        unique_items=True,
    )
    symbols: List[str] = Field(..., description='List of related or mentioned symbols')
    source: constr(min_length=1) = Field(
        ..., description='Source where the news originated from (e.g. Benzinga)'
    )


class GetNewsResponse(BaseModel):
    news: Optional[List[News]] = None
    next_page_token: Optional[str] = Field(
        None, description='Pagination token for next page'
    )


class MarketMoversResponse(BaseModel):
    gainers: List[MarketMoverAsset] = Field(..., description='List of top N gainers')
    losers: List[MarketMoverAsset] = Field(..., description='List of top N losers')
    market_type: MarketType = Field(..., description='Market type (stocks or crypto)')
    last_updated: str = Field(..., description='Time the movers where last computed')
