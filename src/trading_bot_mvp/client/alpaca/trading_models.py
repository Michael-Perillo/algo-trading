# generated by datamodel-codegen:
#   filename:  trading_spec.yaml
#   timestamp: 2025-06-20T21:19:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, constr


class AccountStatus(Enum):
    ONBOARDING = 'ONBOARDING'
    SUBMISSION_FAILED = 'SUBMISSION_FAILED'
    SUBMITTED = 'SUBMITTED'
    ACCOUNT_UPDATED = 'ACCOUNT_UPDATED'
    APPROVAL_PENDING = 'APPROVAL_PENDING'
    ACTIVE = 'ACTIVE'
    REJECTED = 'REJECTED'


class DtbpCheck(Enum):
    both = 'both'
    entry = 'entry'
    exit = 'exit'


class AccountConfigurations(BaseModel):
    dtbp_check: Optional[DtbpCheck] = Field(
        None,
        description='both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.',
    )
    trade_confirm_email: Optional[str] = Field(
        None, description='all or none. If none, emails for order fills are not sent.'
    )
    suspend_trade: Optional[bool] = Field(
        None, description='If true, new orders are blocked.'
    )
    no_shorting: Optional[bool] = Field(
        None, description='If true, account becomes long-only mode.'
    )
    fractional_trading: Optional[bool] = Field(
        None,
        description='If true, account is able to participate in fractional trading',
    )
    max_margin_multiplier: Optional[str] = Field(None, description='Can be "1" or "2"')
    pdt_check: Optional[str] = Field(None, example='entry')


class Type(Enum):
    fill = 'fill'
    partial_fill = 'partial_fill'


class ActivityType(Enum):
    FILL = 'FILL'
    TRANS = 'TRANS'
    MISC = 'MISC'
    ACATC = 'ACATC'
    ACATS = 'ACATS'
    CSD = 'CSD'
    CSW = 'CSW'
    DIV = 'DIV'
    DIVCGL = 'DIVCGL'
    DIVCGS = 'DIVCGS'
    DIVFEE = 'DIVFEE'
    DIVFT = 'DIVFT'
    DIVNRA = 'DIVNRA'
    DIVROC = 'DIVROC'
    DIVTW = 'DIVTW'
    DIVTXEX = 'DIVTXEX'
    INT = 'INT'
    INTNRA = 'INTNRA'
    INTTW = 'INTTW'
    JNL = 'JNL'
    JNLC = 'JNLC'
    JNLS = 'JNLS'
    MA = 'MA'
    NC = 'NC'
    OPASN = 'OPASN'
    OPEXP = 'OPEXP'
    OPXRC = 'OPXRC'
    PTC = 'PTC'
    PTR = 'PTR'
    REORG = 'REORG'
    SC = 'SC'
    SSO = 'SSO'
    SSP = 'SSP'
    CFEE = 'CFEE'
    FEE = 'FEE'


class OrderType(Enum):
    market = 'market'
    limit = 'limit'
    stop = 'stop'
    stop_limit = 'stop_limit'
    trailing_stop = 'trailing_stop'


class OrderSide(Enum):
    buy = 'buy'
    sell = 'sell'


class OrderClass(Enum):
    simple = 'simple'
    bracket = 'bracket'
    oco = 'oco'
    oto = 'oto'
    field_ = ''


class OrderStatus(Enum):
    new = 'new'
    partially_filled = 'partially_filled'
    filled = 'filled'
    done_for_day = 'done_for_day'
    canceled = 'canceled'
    expired = 'expired'
    replaced = 'replaced'
    pending_cancel = 'pending_cancel'
    pending_replace = 'pending_replace'
    accepted = 'accepted'
    pending_new = 'pending_new'
    accepted_for_bidding = 'accepted_for_bidding'
    stopped = 'stopped'
    rejected = 'rejected'
    suspended = 'suspended'
    calculated = 'calculated'


class TimeInForce(Enum):
    day = 'day'
    gtc = 'gtc'
    opg = 'opg'
    cls = 'cls'
    ioc = 'ioc'
    fok = 'fok'


class Status(Enum):
    active = 'active'
    inactive = 'inactive'


class AssetClass(Enum):
    us_equity = 'us_equity'
    crypto = 'crypto'


class Calendar(BaseModel):
    date: constr(min_length=1) = Field(
        ..., description='Date string in “%Y-%m-%d” format'
    )
    open: constr(min_length=1) = Field(
        ..., description='The time the market opens at on this date in “%H:%M” format'
    )
    close: constr(min_length=1) = Field(
        ..., description='The time the market closes at on this date in “%H:%M” format'
    )
    session_open: constr(min_length=1)
    session_close: constr(min_length=1)


class Clock(BaseModel):
    timestamp: Optional[datetime] = Field(None, description='Current timestamp\n')
    is_open: Optional[bool] = Field(
        None, description='Whether or not the market is open\n'
    )
    next_open: Optional[datetime] = Field(
        None, description='Next Market open timestamp'
    )
    next_close: Optional[datetime] = Field(
        None, description='Next market close timestamp'
    )


class PortfolioHistory(BaseModel):
    timestamp: Optional[List[int]] = Field(
        None,
        description='time of each data element, left-labeled (the beginning of time window)',
    )
    equity: Optional[List[float]] = Field(
        None,
        description='equity value of the account in dollar amount as of the end of each time window',
    )
    profit_loss: Optional[List[float]] = Field(
        None, description='profit/loss in dollar from the base value'
    )
    profit_loss_pct: Optional[List[float]] = Field(
        None, description='profit/loss in percentage from the base value'
    )
    base_value: Optional[float] = Field(
        None, description='basis in dollar of the profit loss calculation'
    )
    timeframe: Optional[str] = Field(
        None, description='time window size of each data element', example='15Min'
    )


class Exchange(Enum):
    AMEX = 'AMEX'
    ARCA = 'ARCA'
    BATS = 'BATS'
    NYSE = 'NYSE'
    NASDAQ = 'NASDAQ'
    NYSEARCA = 'NYSEARCA'
    OTC = 'OTC'


class CanceledOrderResponse(BaseModel):
    id: Optional[UUID] = Field(None, description='orderId')
    status: Optional[int] = Field(None, description='http response code', example=200)


class PatchOrderRequest(BaseModel):
    qty: Optional[str] = Field(None, description='number of shares to trade')
    time_in_force: Optional[TimeInForce] = None
    limit_price: Optional[str] = Field(
        None, description='required if original order type is limit or stop_limit'
    )
    stop_price: Optional[str] = Field(
        None, description='required if original order type is limit or stop_limit'
    )
    trail: Optional[str] = Field(
        None,
        description='the new value of the trail_price or trail_percent value (works only for type=“trailing_stop”)',
    )
    client_order_id: Optional[constr(max_length=48)] = Field(
        None,
        description='A unique identifier for the order. Automatically generated if not sent.',
    )


class UpdateWatchlistRequest(BaseModel):
    name: str
    symbols: Optional[List[str]] = None


class AddAssetToWatchlistRequest(BaseModel):
    symbol: Optional[str] = Field(
        None, description='symbol name to append to watchlist', example='AAPL'
    )


class Account(BaseModel):
    id: UUID = Field(..., description='Account Id.\n')
    account_number: Optional[str] = Field(None, description='Account number.')
    status: AccountStatus
    currency: Optional[str] = Field(None, description='USD\n', example='USD')
    cash: Optional[str] = Field(None, description='Cash Balance\n')
    portfolio_value: Optional[str] = Field(
        None,
        description='Total value of cash + holding positions (This field is deprecated. It is equivalent to the equity field.)',
    )
    pattern_day_trader: Optional[bool] = Field(
        None,
        description='Whether or not the account has been flagged as a pattern day trader',
    )
    trade_suspended_by_user: Optional[bool] = Field(
        None,
        description='User setting. If true, the account is not allowed to place orders.',
    )
    trading_blocked: Optional[bool] = Field(
        None, description='If true, the account is not allowed to place orders.\n'
    )
    transfers_blocked: Optional[bool] = Field(
        None,
        description='If true, the account is not allowed to request money transfers.',
    )
    account_blocked: Optional[bool] = Field(
        None, description='If true, the account activity by user is prohibited.'
    )
    created_at: Optional[datetime] = Field(
        None, description='Timestamp this account was created at\n'
    )
    shorting_enabled: Optional[bool] = Field(
        None,
        description='Flag to denote whether or not the account is permitted to short',
    )
    long_market_value: Optional[str] = Field(
        None,
        description='Real-time MtM value of all long positions held in the account\n',
    )
    short_market_value: Optional[str] = Field(
        None,
        description='Real-time MtM value of all short positions held in the account',
    )
    equity: Optional[str] = Field(
        None, description='Cash + long_market_value + short_market_value'
    )
    last_equity: Optional[str] = Field(
        None, description='Equity as of previous trading day at 16:00:00 ET'
    )
    multiplier: Optional[str] = Field(
        None,
        description='Buying power multiplier that represents account margin classification; valid values 1 (standard limited margin account with 1x buying power), 2 (reg T margin account with 2x intraday and overnight buying power; this is the default for all non-PDT accounts with $2,000 or more equity), 4 (PDT account with 4x intraday buying power and 2x reg T overnight buying power)',
    )
    buying_power: Optional[str] = Field(
        None,
        description='Current available $ buying power; If multiplier = 4, this is your daytrade buying power which is calculated as (last_equity - (last) maintenance_margin) * 4; If multiplier = 2, buying_power = max(equity – initial_margin,0) * 2; If multiplier = 1, buying_power = cash',
    )
    initial_margin: Optional[str] = Field(
        None,
        description='Reg T initial margin requirement (continuously updated value)',
    )
    maintenance_margin: Optional[str] = Field(
        None, description='Maintenance margin requirement (continuously updated value)'
    )
    sma: Optional[str] = Field(
        None,
        description='Value of special memorandum account (will be used at a later date to provide additional buying_power)',
    )
    daytrade_count: Optional[int] = Field(
        None,
        description='The current number of daytrades that have been made in the last 5 trading days (inclusive of today)',
    )
    last_maintenance_margin: Optional[str] = Field(
        None,
        description='Your maintenance margin requirement on the previous trading day',
    )
    daytrading_buying_power: Optional[str] = Field(
        None,
        description='Your buying power for day trades (continuously updated value)',
    )
    regt_buying_power: Optional[str] = Field(
        None,
        description='Your buying power under Regulation T (your excess equity - equity minus margin value - times your margin multiplier)\n',
    )


class TradingActivities(BaseModel):
    activity_type: Optional[ActivityType] = None
    id: Optional[str] = Field(
        None,
        description='An id for the activity. Always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.',
    )
    cum_qty: Optional[str] = Field(
        None, description='The cumulative quantity of shares involved in the execution.'
    )
    leaves_qty: Optional[str] = Field(
        None,
        description='For partially_filled orders, the quantity of shares that are left to be filled.\n',
    )
    price: Optional[str] = Field(
        None, description='The per-share price that the trade was executed at.'
    )
    qty: Optional[str] = Field(
        None, description='The number of shares involved in the trade execution.'
    )
    side: Optional[str] = Field(None, description='buy or sell')
    symbol: Optional[str] = Field(
        None, description='The symbol of the security being traded.', example='AAPL'
    )
    transaction_time: Optional[datetime] = Field(
        None, description='The time at which the execution occurred.'
    )
    order_id: Optional[UUID] = Field(
        None, description='The id for the order that filled.'
    )
    type: Optional[Type] = Field(
        None, description='fill or partial_fill', example='fill'
    )
    order_status: Optional[OrderStatus] = None


class NonTradeActivities(BaseModel):
    activity_type: Optional[ActivityType] = None
    id: Optional[str] = Field(
        None,
        description='An ID for the activity, always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.',
    )
    date: Optional[datetime] = Field(
        None,
        description='The date on which the activity occurred or on which the transaction associated with the activity settled.',
    )
    net_amount: Optional[str] = Field(
        None,
        description='The net amount of money (positive or negative) associated with the activity.',
    )
    symbol: Optional[str] = Field(
        None,
        description='The symbol of the security involved with the activity. Not present for all activity types.',
    )
    qty: Optional[str] = Field(
        None,
        description='For dividend activities, the number of shares that contributed to the payment. Not present for other activity types.\n',
    )
    per_share_amount: Optional[str] = Field(
        None,
        description='For dividend activities, the average amount paid per share. Not present for other activity types.',
    )


class Order(BaseModel):
    id: Optional[str] = Field(None, description='Order ID')
    client_order_id: Optional[constr(max_length=48)] = Field(
        None, description='Client unique order ID'
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    submitted_at: Optional[datetime] = None
    filled_at: Optional[datetime] = None
    expired_at: Optional[datetime] = None
    canceled_at: Optional[datetime] = None
    failed_at: Optional[datetime] = None
    replaced_at: Optional[datetime] = None
    replaced_by: Optional[UUID] = Field(
        None, description='The order ID that this order was replaced by'
    )
    replaces: Optional[UUID] = Field(
        None, description='The order ID that this order replaces'
    )
    asset_id: Optional[UUID] = Field(None, description='Asset ID')
    symbol: constr(min_length=1) = Field(..., description='Asset symbol')
    asset_class: Optional[AssetClass] = None
    notional: constr(min_length=1) = Field(
        ...,
        description='Ordered notional amount. If entered, qty will be null. Can take up to 9 decimal points.',
    )
    qty: constr(min_length=1) = Field(
        ...,
        description='Ordered quantity. If entered, notional will be null. Can take up to 9 decimal points.',
    )
    filled_qty: Optional[constr(min_length=1)] = Field(
        None, description='Filled quantity'
    )
    filled_avg_price: Optional[str] = Field(None, description='Filled average price')
    order_class: Optional[OrderClass] = None
    order_type: Optional[str] = Field(
        None, description='Deprecated in favour of the field "type" '
    )
    type: OrderType
    side: OrderSide
    time_in_force: TimeInForce
    limit_price: Optional[str] = Field(None, description='Limit price')
    stop_price: Optional[str] = Field(None, description='Stop price')
    status: Optional[OrderStatus] = None
    extended_hours: Optional[bool] = Field(
        None,
        description='If true, eligible for execution outside regular trading hours.',
    )
    legs: Optional[List[Order]] = Field(
        None,
        description='When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.',
    )
    trail_percent: Optional[str] = Field(
        None,
        description='The percent value away from the high water mark for trailing stop orders.',
    )
    trail_price: Optional[str] = Field(
        None,
        description='The dollar value away from the high water mark for trailing stop orders.',
    )
    hwm: Optional[str] = Field(
        None,
        description='The highest (lowest) market price seen since the trailing stop order was submitted.',
    )


class Assets(BaseModel):
    id: UUID = Field(..., description='Asset ID')
    class_: AssetClass = Field(..., alias='class')
    exchange: Exchange
    symbol: str = Field(..., description='The symbol of the asset', example='AAPL')
    name: constr(min_length=1) = Field(
        ..., description='The official name of the asset'
    )
    status: Status = Field(..., description='active or inactive', example='active')
    tradable: bool = Field(..., description='Asset is tradable on Alpaca or not')
    marginable: bool = Field(..., description='Asset is marginable or not')
    shortable: bool = Field(..., description='Asset is shortable or not')
    easy_to_borrow: bool = Field(
        ...,
        description='Asset is easy-to-borrow or not (filtering for easy_to_borrow = True is the best way to check whether the name is currently available to short at Alpaca).',
    )
    fractionable: bool = Field(..., description='Asset is fractionable or not')


class Position(BaseModel):
    asset_id: UUID = Field(..., description='Asset ID')
    symbol: str = Field(..., description='Symbol name of the asset', example='AAPL')
    exchange: Exchange
    asset_class: AssetClass
    avg_entry_price: constr(min_length=1) = Field(
        ..., description='Average entry price of the position'
    )
    qty: constr(min_length=1) = Field(..., description='The number of shares')
    qty_available: Optional[constr(min_length=1)] = Field(
        None, description='Total number of shares available minus open orders'
    )
    side: constr(min_length=1) = Field(..., description='“long”')
    market_value: constr(min_length=1) = Field(
        ..., description='Total dollar amount of the position'
    )
    cost_basis: constr(min_length=1) = Field(
        ..., description='Total cost basis in dollar'
    )
    unrealized_pl: constr(min_length=1) = Field(
        ..., description='Unrealized profit/loss in dollars'
    )
    unrealized_plpc: constr(min_length=1) = Field(
        ..., description='Unrealized profit/loss percent (by a factor of 1)'
    )
    unrealized_intraday_pl: constr(min_length=1) = Field(
        ..., description='Unrealized profit/loss in dollars for the day'
    )
    unrealized_intraday_plpc: constr(min_length=1) = Field(
        ..., description='Unrealized profit/loss percent (by a factor of 1)'
    )
    current_price: constr(min_length=1) = Field(
        ..., description='Current asset price per share'
    )
    lastday_price: constr(min_length=1) = Field(
        ...,
        description='Last day’s asset price per share based on the closing value of the last trading day',
    )
    change_today: constr(min_length=1) = Field(
        ..., description='Percent change from last day price (by a factor of 1)'
    )
    asset_marginable: bool


class Watchlist(BaseModel):
    id: UUID = Field(..., description='watchlist id')
    account_id: UUID = Field(..., description='account ID')
    created_at: datetime
    updated_at: datetime
    name: constr(min_length=1) = Field(
        ..., description='user-defined watchlist name (up to 64 characters)'
    )
    assets: Optional[List[Assets]] = Field(
        None,
        description='the content of this watchlist, in the order as registered by the client',
    )


class PositionClosedReponse(BaseModel):
    symbol: str = Field(..., description='Symbol name of the asset')
    status: str = Field(
        ..., description='Http status code for the attempt to close this position'
    )
    body: Optional[Order] = None


Order.update_forward_refs()
